#ifndef Ex2
#define Ex2
using namespace std;
class Port
{
private:

	char * brand;
	char style[20]; // i.e., tawny, ruby, vintage
	int bottles;

public:
	
	Port(const char * br = "none", const char * st = "none", int b = 0) :bottles(b)
	{
		brand = new char[strlen(br) + 1];
		strcpy_s(brand, strlen(br) + 1, br);
		
		strcpy_s(style, strlen(st) + 1, st);
	}
	Port(const Port & p) 
	{
		brand = new char[strlen(p.brand) + 1];
		strcpy_s(brand, strlen(p.brand) + 1, p.brand);
		bottles = p.bottles;
		strcpy_s(style, strlen(p.style) + 1, p.style);
	} // copy constructor
	
	virtual ~Port() { delete[] brand; }
	Port & operator=(const Port & p) 
	{
		if (this == &p)return *this;
		strcpy_s(style, strlen(p.style) + 1, p.style);
		bottles = p.bottles;
		
		delete[] brand;
		brand = new char[strlen(p.brand) + 1];
		strcpy_s(brand, strlen(p.brand) + 1, p.brand);

	}
	Port & operator+=(int b) 
	{
		this->bottles += b;
		return *this;
	} // adds b to bottles
	Port & operator-=(int b) 
	{
		if ((this->bottles - b)>=0) 
		{
			this->bottles -= b;
		}
		return *this;
	} // subtracts b from bottles, if aviable
	int BottleCount() const { return bottles; }
	virtual void Show() const 
	{
		cout<< "Brand :" << brand << endl
			<< "Kind :" << style << endl
			<< "Bottles :" << bottles << endl;

	}
	friend ostream & operator<<(ostream & os, const Port & p) 
	{
		os << p.bottles<<", "<<p.brand<<", "<<p.style;
		return os;
	}
};

#endif // !Ex2
